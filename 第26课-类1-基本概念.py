"""
面向对象--类
"""


"""
    面向对象编程是最有效的软件编写方法之一。在面向对象编程中，你编写表示现实世界中的事物和情景的类，并基于这些类来创建对象。编写类时，你定义一大类对
象都有的通用行为。基于类创建对象时，每个对象都自动具备这种通用行为，然后可根据需要赋予每个对象独特的个性。使用面向对象编程可模拟现实情景，其逼真
程度达到了令你惊讶的地步。
    根据类来创建对象被称为实例化，这让你能够使用类的实例。在本章中，你将编写一些类并创建其实例。你将指定可在实例中存储什么信息，定义可对这些实例执行
哪些操作。你还将编写一些类来扩展既有类的功能，让相似的类能够高效地共享代码。你将把自己编写的类存储在模块中，并在自己的程序文件中导入其他程序员编
写的类。
    理解面向对象编程有助于你像程序员那样看世界，还可以帮助你真正明白自己编写的代码：不仅是各行代码的作用，还有代码背后更宏大的概念。了解类背后的概念
可培养逻辑思维，让你能够通过编写程序来解决遇到的几乎任何问题。
    随着面临的挑战日益严峻，类还能让你以及与你合作的其他程序员的生活更轻松。如果你与其他程序员基于同样的逻辑来编写代码，你们就能明白对方所做的工作；
你编写的程序将能被众多合作者所理解，每个人都能事半功倍。
"""
#创建和使用类
"""
使用类几乎可以模拟任何东西。下面来编写一个表示小狗的简单类Dog ——它表示的不是特定的小狗，而是任何小狗。对于大多数宠物狗，我们都知道些什么呢？它们都有名字
和年龄；我们还知道，大多数小狗还会蹲下和打滚。由于大多数小狗都具备上述两项信息（名字和年龄）和两种行为（蹲下和打滚），我们的Dog 类将包含它们。这个类让
Python知道如何创建表示小狗的对象。编写这个类后，我们将使用它来创建表示特定小狗的实例。
"""

#创建Dog类：
"""根据Dog 类创建的每个实例都将存储名字和年龄。我们赋予了每条小狗蹲下（sit() ）和打滚（roll_over() ）的能力："""
class Dog():
    def __init__(self,name,age):
        self.name = name
        self.age = age

    def sit(self):
        print(f"{self.name.title()} is sitting now.")

    def roll_over(self):
        print(f"{self.name.title()} rolled over!")

"""
    形参self 必不可少，还必须位于其他形参的前面。为何必须在方法定义中包含形参self 呢？因为Python调用这个__init__() 方法来创建Dog 实例时，
将自动传入实参self 。每个与类相关联的方法调用都自动传递实参self ，它是一个指向实例本身的引用，让实例能够访问类中的属性和方法。
    我们创建Dog 实例时，Python将调用Dog 类的方法__init__() 。我们将通过实参向Dog() 传递名字和年龄；self 会自动传递，因此我们不需要传递它。
每当我们根据Dog 类创建实例时，都只需给最后两个形参（name 和age）提供值。
"""
"""
以self为前缀的变量都可供类中的所有方法使用，我们还可以通过类的任何实例来访问这些变量。
self.name = name 获取存储在形参name中的值，并将其存储到变量name中，然后该变量被关联到当前创建的实例。
self.age = age 的作用与此类似。
像这样可通过实例访问的变量称为属性。
"""
"""
Dog类还定义了另外两个方法：sit() 和roll_over()。由于这些方法不需要额外的信息，如名字或年龄，因此它们只有一个形参self。
我们后面将创建的实例能够访问这些方法，换句话说，它们都会蹲下和打滚。当前，sit() 和roll_over()所做的有限，它们只是打印一条消息，指出小狗正蹲下或打滚。
但可以扩展这些方法以模拟实际情况：
如果这个类包含在一个计算机游戏中，这些方法将包含创建小狗蹲下和打滚动画效果的代码。如果这个类是用于控制机器狗的，这些方法将引导机器狗做出蹲下和打滚的动作。
"""
print("*"*100)
my_dog=Dog("alex",5)

#访问属性
print(my_dog.name)
print(my_dog.age)
print(f"My dog's name is {my_dog.name},its age is {my_dog.age} years old.")

#调用方法
my_dog.sit()
my_dog.roll_over()

#创建多个实例
her_dog=Dog("willie",6)
your_dog=Dog('lucy',3)
'''在这个实例中，我们创建了两条小狗，它们分别名为Willie和Lucy。每条小狗都是一个独立的实例，有自己的一组属性，能够执行相同的操作：'''
her_dog.roll_over()
your_dog.sit()



